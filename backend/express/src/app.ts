import express, {Application, Request, Response, NextFunction} from 'express';
import bodyParser from 'body-parser';
import {RegisterRoutes} from './routes';
import {errorHandler} from './utility/errorHandler';
import {createDatasource} from "./utility/createDatasource";


class App {
    public app: Application;

    constructor() {
        this.app = express();
        this.config().then(_ => {});
    }

    private async config(): Promise<void> {
        await createDatasource();
        // Swagger routes
        this.app.use('/api-docs/swagger.json', express.static('src/swagger.json'));

        // Swagger UI
        this.app.use('/api-docs/swagger', express.static('src/swagger'));
        this.app.use('/api-docs/swagger/assets', express.static('node_modules/swagger-ui-dist'));

        // Static files
        this.app.use('/static', express.static('src/static'));

        // Default server settings
        this.app.use((req: Request, res: Response, next: NextFunction) => {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Methods', 'GET,POST,DELETE,OPTIONS,PUT');
            res.header('Access-Control-Allow-Headers', '*');
            res.header('Content-type', 'application/json');
            next();
        });

        // Parse all incoming data as json
        this.app.use(bodyParser.json());
        this.app.use(bodyParser.urlencoded({extended: true}));

        // Register autogenerated tsoa routes
        RegisterRoutes(this.app);

        // Handle errors based on Swagger description
        this.app.use(errorHandler);
    }
}

export default new App().app;
