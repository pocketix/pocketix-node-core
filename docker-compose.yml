version: "3.9"

services:
  express:
    build:
      context: backend
      dockerfile: Dockerfile
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - network
    links:
      - postgres
      - influxdb
    depends_on:
      - postgres
      - influxdb
    restart: unless-stopped

  serverless:
    profiles:
      - serverless
    build:
      context: backend
      dockerfile: ServerlessDockerfile
    expose:
      - "4000"
    ports:
      - "4000:4000"
    networks:
      - network
    links:
      - postgres
      - influxdb
    depends_on:
      - postgres
      - influxdb
    restart: unless-stopped

  postgres:
    image: postgres:14.2
    restart: unless-stopped
    hostname: postgres
    environment:
      - POSTGRES_DB=home
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backend/sql.sql:/docker-entrypoint-initdb.d/init.sql

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    expose:
      - "4200"
    ports:
      - "4200:80"
    networks:
      - network
    depends_on:
      - express

  frontend-serverless:
    profiles:
      - serverless
    build:
      context: frontend
      dockerfile: DockerfileServerless
    expose:
      - "4300"
    ports:
      - "4300:4300"
    networks:
      - network
    depends_on:
      - express

  nginx:
    image: nginx:mainline-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
    networks:
      - network

  influxdb:
    image: influxdb:2.1.0
    build:
      context: backend
      dockerfile: InfluxDockerfile
    restart: unless-stopped
    ports:
      - "8086:8086"
    networks:
      - network
    environment:
      - DOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME=configname
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=my-user
      - DOCKER_INFLUXDB_INIT_PASSWORD=my-password
      - DOCKER_INFLUXDB_INIT_ORG=home
      - DOCKER_INFLUXDB_INIT_BUCKET=bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=Fgp2ozMxmkYnUBkzwLpkx6ydOVXyQqF4-ZPctGjv8-xkirYPYRvoBtrpAHMCr_joYoJMOqZjl8djjuyOx-MR_A==
    healthcheck:
      test: [ "CMD", "influx", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  mqtt-forwarder:
    build:
      context: go-subscribe
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - MQTT_BROKER=ws://mqtt.test.hole:80
      - MQTT_USERNAME=bot
      - MQTT_PASSWORD=8Zdp-2iX4oV9.oLM#4KHw[5rA7]OU7[CEw=Pwr)G
      - ENDPOINT_URL=http://express:3000/statistics/data
    networks:
      - network

networks:
  network:
    driver: bridge
